#!/usr/bin/env node
var Gist, Task, createGist, exec, files, fromFiles, fromStdin, fs, help, is_stdin, known_opts, loadConfig, nopt, options, path, short_opts;
Gist = require('node-gist');
nopt = require('nopt');
path = require('path');
fs = require('fs');
Task = require('parallel').Task;
exec = require('child_process').exec;
help = "\nCreate a Gist from a file or stdin\n\ngist -pt [file.ext]\n\nOptions:\n  --private  -p: Mark the gist private\n  --name     -n: Manually set the file name\n  --type     -t: Manually set file extension\n  --user     -u: Manually set Github username\n  --token    -a: Manually set Github api token\n";
known_opts = {
  private: Boolean,
  meta: Boolean,
  name: String,
  type: String,
  token: String,
  user: String,
  help: Boolean
};
short_opts = {
  p: ['--private', 'true'],
  t: '--type',
  u: '--user',
  a: '--token',
  h: '--help',
  n: '--name'
};
options = nopt(known_opts, short_opts);
if (options.help) {
  console.log(help);
  return process.exit();
}
files = options.argv.remain;
is_stdin = options.argv.remain.length === 0;
loadConfig = function(callback) {
  var has_error, task;
  if (!options.user) {
    options.user = process.env.GITHUB_USER;
  }
  if (!options.token) {
    options.token = process.env.GITHUB_TOKEN;
  }
  if (options.user && options.token) {
    return callback();
  }
  task = new Task;
  if (!options.user) {
    task.add('user', [exec, 'git config --global github.user']);
  }
  if (!options.token) {
    task.add('token', [exec, 'git config --global github.token']);
  }
  has_error = null;
  return task.run(function(name, error, stdout) {
    if (name === null) {
      if (has_error || options.user === null || options.token === null) {
        options.user = options.token = null;
      }
      return callback(has_error);
    }
    if (error) {
      return has_error = error;
    }
    return options[name] = stdout.trim() || null;
  });
};
loadConfig(function(error) {
  if (error) {
    throw error;
  }
  if (is_stdin) {
    return fromStdin();
  }
  return fromFiles();
});
fromStdin = function() {
  var data;
  data = '';
  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(chunk) {
    return data += chunk;
  });
  return process.stdin.on('end', function() {
    return createGist([
      {
        name: options.name || null,
        content: data
      }
    ]);
  });
};
fromFiles = function() {
  var file, gist_files, task, _i, _len;
  if (files.length > 10) {
    throw new Error('Over 10 files.');
  }
  task = new Task;
  gist_files = [];
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    task.add(path.basename(file), [fs.readFile, file, 'utf8']);
  }
  return task.run(function(name, error, content) {
    if (name === null) {
      return createGist(gist_files);
    }
    if (error) {
      throw error;
    }
    return gist_files.push({
      name: name,
      content: content
    });
  });
};
createGist = function(files) {
  var file, gist, type, _i, _len;
  gist = new Gist({
    private: options.private || false,
    user: options.user,
    token: options.token
  });
  type = options.type ? '.' + options.type || null : void 0;
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    gist.addFile(file.name, file.content, type);
  }
  return gist.save(function(error) {
    return console.log("https://gist.github.com/" + this.id);
  });
};