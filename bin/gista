#!/usr/bin/env node
// Generated by CoffeeScript 1.3.3
var Client, async, client, createGist, exec, files, fromFiles, fromStdin, fs, generateToken, help, is_gentoken, is_stdin, known_opts, loadConfig, nopt, options, path, short_opts, tty, url;

Client = require('node-gist').Client;

nopt = require('nopt');

path = require('path');

url = require('url');

tty = require('tty');

fs = require('fs');

async = require('async-array').async;

exec = require('child_process').exec;

help = "Create a Gist from a file or stdin using node-gist.\n\ngista -pd \"My cool gist\" [file.ext]\n\nOptions:\n  -f, --fetch     Fetch a gist by id or url\n  -p, --private   Mark the gist private\n  -n, --name      Manually set the file name\n  -d, --desc      Add a description\n  -t, --type      Manually set file extension\n  -a, --token     Manually set the oauth token\n      --gentoken  Generate a token from previous token/credentials\n  -u, --user      Manually set Github username\n      --password  Manually set Github user password\n      --tty       Force tty mode for output formatting\n  -v, --verbose   When reading from stdin, echo input back to stdout\n  -h, --help      You looking at it\n";

known_opts = {
  "private": Boolean,
  fetch: String,
  name: String,
  desc: String,
  type: String,
  token: String,
  gentoken: Boolean,
  password: String,
  user: String,
  tty: Boolean,
  verbose: Boolean,
  help: Boolean
};

short_opts = {
  f: '--fetch',
  p: ['--private', 'true'],
  n: '--name',
  d: '--desc',
  t: '--type',
  a: '--token',
  u: '--user',
  v: '--verbose',
  h: '--help'
};

options = nopt(known_opts, short_opts);

if (options.tty == null) {
  options.tty = tty.isatty(process.stdout);
}

if (options.help) {
  console.log(help);
  return process.exit();
}

if (options.fetch) {
  client = new Client;
  path = (url.parse(options.fetch)).pathname;
  if (path[0] !== '/') {
    path = '/' + path;
  }
  return client.get(path, function(error, gist) {
    var buf, file, files, multiple, ret, _i, _len;
    if (error) {
      throw error;
    }
    files = Object.keys(gist.files);
    multiple = files.length > 1;
    if (!multiple) {
      return console.log(gist.files[files[0]].content);
    }
    ret = [];
    buf = '';
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      buf += file + '\n';
      buf += new Array(file.length + 1).join('=');
      buf += '\n\n' + gist.files[file].content;
      ret.push(buf);
      buf = '';
    }
    return console.log(ret.join('\n\n'));
  });
}

files = options.argv.remain;

is_gentoken = options.gentoken === true;

is_stdin = options.argv.remain.length === 0;

loadConfig = function(callback) {
  var task;
  if (!options.user) {
    options.user = process.env.GITHUB_USER;
  }
  if (!options.password) {
    options.password = process.env.GITHUB_PASSWORD;
  }
  if (!options.token) {
    options.token = process.env.GISTA_TOKEN;
  }
  if (options.token) {
    options.user = null;
    options.password = null;
    return callback();
  }
  task = async([]);
  if (!options.user) {
    task.push('user');
  }
  if (!options.password) {
    task.push('password');
  }
  return task.forEach(function(item, i, next) {
    return exec("git config --global github." + item, function(error, stdout) {
      if (error) {
        return next();
      }
      options[item] = stdout.trim();
      return next();
    });
  }).exec(function(error, results) {
    var has_userpass;
    has_userpass = (options.user && options.password) !== null;
    if (!has_userpass) {
      options.user = options.password = null;
    }
    if (error) {
      return callback(error);
    }
    return callback();
  });
};

generateToken = function() {
  var authorization;
  client = new Client({
    user: options.user,
    password: options.password,
    token: options.token
  });
  client.path = '';
  authorization = {
    scopes: ['gist'],
    note: 'gista CLI',
    note_url: 'https://github.com/tim-smart/gista'
  };
  return client.post('/authorizations', authorization, function(error, data) {
    if (error) {
      throw error;
    }
    if (!data.token) {
      throw new Error('Token generation refused by Github.');
    }
    console.log(data.token);
    return console.error("\nFor continued use of this token by the gista cli tool, make\nyou assign it to the GISTA_TOKEN environment variable in your\nbash profile.");
  });
};

fromStdin = function() {
  var data, first;
  data = '';
  first = true;
  process.stdin.resume();
  process.stdin.setEncoding('utf8');
  process.stdin.on('data', function(chunk) {
    if (options.verbose) {
      if (first) {
        process.stdout.write("> ");
        first = false;
      }
      process.stdout.write(chunk.split("\n").join("\n> "));
    }
    return data += chunk;
  });
  return process.stdin.on('end', function() {
    if (options.verbose) {
      process.stdout.write("EOF\n");
    }
    return createGist([
      {
        name: options.name || 'stdin.txt',
        content: data
      }
    ]);
  });
};

fromFiles = function() {
  if (files.length > 10) {
    throw new Error('Over 10 files.');
  }
  return async(files).map(function(file, i, next) {
    return fs.readFile(file, 'utf8', function(error, content) {
      if (error) {
        return next(error);
      }
      return next(null, {
        name: path.basename(file),
        content: content
      });
    });
  }).exec(function(error, results) {
    if (error) {
      throw error;
    }
    return createGist(results.array());
  });
};

createGist = function(files) {
  var file, gist, name, type, _i, _len;
  client = new Client({
    user: options.user,
    password: options.password,
    token: options.token
  });
  gist = {
    "public": !options["private"],
    files: {}
  };
  if (options.desc) {
    gist.description = options.desc;
  }
  type = options.type ? '.' + options.type || null : void 0;
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    name = file.name;
    if (type) {
      name = name + type;
    }
    gist.files[name] = {
      content: file.content
    };
  }
  return client.post('', gist, function(error, gist) {
    if (error) {
      throw error;
    }
    if (options.tty) {
      return console.log(gist.html_url);
    }
    return process.stdout.write(gist.html_url);
  });
};

loadConfig(function(error) {
  if (error) {
    throw error;
  }
  if (is_gentoken) {
    return generateToken();
  }
  if (is_stdin) {
    return fromStdin();
  }
  return fromFiles();
});
